// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductsAPI.Data;

#nullable disable

namespace ProductsAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241011140645_Employees")]
    partial class Employees
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ProductsAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Apparel and accessories",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Home appliances and kitchenware",
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sporting goods and equipment",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Literature and reading material",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Children's toys and games",
                            Name = "Toys"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Car parts and accessories",
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Health products and cosmetics",
                            Name = "Health & Beauty"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Stationery and office equipment",
                            Name = "Office Supplies"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Products for pets",
                            Name = "Pet Supplies"
                        });
                });

            modelBuilder.Entity("ProductsAPI.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProductsAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CustomerContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerAddress = "123 Elm St",
                            CustomerContact = "555-1234",
                            CustomerName = "John Doe",
                            OrderDate = new DateTime(2024, 10, 11, 9, 6, 45, 17, DateTimeKind.Local).AddTicks(485)
                        },
                        new
                        {
                            Id = 2,
                            CustomerAddress = "456 Oak St",
                            CustomerContact = "555-5678",
                            CustomerName = "Jane Smith",
                            OrderDate = new DateTime(2024, 10, 11, 9, 6, 45, 17, DateTimeKind.Local).AddTicks(518)
                        });
                });

            modelBuilder.Entity("ProductsAPI.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 2,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 2,
                            ProductId = 5,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("ProductsAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Powerful laptop for work and play",
                            Name = "Laptop",
                            Price = 999.99m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Comfortable denim jeans",
                            Name = "Jeans",
                            Price = 49.99m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "High-speed blender",
                            Name = "Blender",
                            Price = 89.99m,
                            Stock = 20
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Description = "Durable basketball",
                            Name = "Basketball",
                            Price = 29.99m,
                            Stock = 150
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            Description = "Bestselling fiction book",
                            Name = "Fiction Novel",
                            Price = 19.99m,
                            Stock = 200
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 6,
                            Description = "Collectible action figure",
                            Name = "Action Figure",
                            Price = 14.99m,
                            Stock = 75
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 7,
                            Description = "Reliable car battery",
                            Name = "Car Battery",
                            Price = 129.99m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 8,
                            Description = "Hydrating face cream",
                            Name = "Face Cream",
                            Price = 24.99m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 9,
                            Description = "Ergonomic office chair",
                            Name = "Office Chair",
                            Price = 199.99m,
                            Stock = 15
                        });
                });

            modelBuilder.Entity("ProductsAPI.Models.OrderProduct", b =>
                {
                    b.HasOne("ProductsAPI.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductsAPI.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductsAPI.Models.Product", b =>
                {
                    b.HasOne("ProductsAPI.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductsAPI.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductsAPI.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ProductsAPI.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
